{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = \"42807e93f32c172b867106667bf5690c\"; // Replace with your WeatherAPI key\n\nconst BASE_URL = \"https://api.weatherapi.com/v1\"; // Fetch weather data from WeatherAPI\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(`${BASE_URL}/${infoType}.json`);\n  url.search = new URLSearchParams({ ...searchParams,\n    key: API_KEY\n  });\n  return fetch(url).then(res => {\n    if (!res.ok) {\n      throw new Error(`HTTP error! status: ${res.status}`);\n    }\n\n    return res.json();\n  });\n}; // Format the current weather data\n\n\nconst formatCurrentWeather = data => {\n  const {\n    location: {\n      lat,\n      lon,\n      name,\n      country\n    },\n    current: {\n      temp_c: temp,\n      feelslike_c: feels_like,\n      humidity,\n      condition: {\n        text: details,\n        icon\n      },\n      wind_kph: speed\n    }\n  } = data;\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    humidity,\n    name,\n    country,\n    details,\n    icon: icon.replace(/^http/, 'https'),\n    // Use HTTPS for icon URL\n    speed\n  };\n}; // Since the WeatherAPI doesn't provide a daily forecast with 'onecall', we'll return current data\n\n\nconst formatForecastWeather = data => {\n  const {\n    current\n  } = data;\n  return {\n    timezone: data.location.tz_id,\n    daily: [{\n      title: \"Today\",\n      temp: current.temp_c,\n      icon: current.condition.icon\n    }],\n    hourly: []\n  };\n}; // Get formatted weather data\n\n\nconst getFormattedWeatherData = async searchParams => {\n  const formattedCurrentWeather = await getWeatherData(\"current\", searchParams).then(formatCurrentWeather);\n  const formattedForecastWeather = await getWeatherData(\"forecast\", { ...searchParams,\n    days: 5 // Number of forecast days (max 10 for free tier)\n\n  }).then(formatForecastWeather);\n  return { ...formattedCurrentWeather,\n    ...formattedForecastWeather\n  };\n}; // Convert UNIX time to local time format\n\n\nconst formatToLocalTime = function (secs, zone) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\";\n  return DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n}; // Update icon URL function if needed\n\n\nconst iconUrlFromCode = icon => `https:${icon}`; // Updated for WeatherAPI\n\n\nexport default getFormattedWeatherData;\nexport { formatToLocalTime, iconUrlFromCode };","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","key","fetch","then","res","ok","Error","status","json","formatCurrentWeather","data","location","lat","lon","name","country","current","temp_c","temp","feelslike_c","feels_like","humidity","condition","text","details","icon","wind_kph","speed","replace","formatForecastWeather","timezone","tz_id","daily","title","hourly","getFormattedWeatherData","formattedCurrentWeather","formattedForecastWeather","days","formatToLocalTime","secs","zone","format","fromSeconds","setZone","toFormat","iconUrlFromCode"],"sources":["C:/Projects/React-Weather-App/src/services/weatherService.js"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nconst API_KEY = \"42807e93f32c172b867106667bf5690c\"; // Replace with your WeatherAPI key\nconst BASE_URL = \"https://api.weatherapi.com/v1\";\n\n// Fetch weather data from WeatherAPI\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(`${BASE_URL}/${infoType}.json`);\n  url.search = new URLSearchParams({ ...searchParams, key: API_KEY });\n\n  return fetch(url)\n    .then((res) => {\n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`);\n      }\n      return res.json();\n    });\n};\n\n// Format the current weather data\nconst formatCurrentWeather = (data) => {\n  const {\n    location: { lat, lon, name, country },\n    current: {\n      temp_c: temp,\n      feelslike_c: feels_like,\n      humidity,\n      condition: { text: details, icon },\n      wind_kph: speed,\n    },\n  } = data;\n\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    humidity,\n    name,\n    country,\n    details,\n    icon: icon.replace(/^http/, 'https'), // Use HTTPS for icon URL\n    speed,\n  };\n};\n\n// Since the WeatherAPI doesn't provide a daily forecast with 'onecall', we'll return current data\nconst formatForecastWeather = (data) => {\n  const { current } = data;\n\n  return {\n    timezone: data.location.tz_id,\n    daily: [{ title: \"Today\", temp: current.temp_c, icon: current.condition.icon }],\n    hourly: [],\n  };\n};\n\n// Get formatted weather data\nconst getFormattedWeatherData = async (searchParams) => {\n  const formattedCurrentWeather = await getWeatherData(\"current\", searchParams)\n    .then(formatCurrentWeather);\n\n  const formattedForecastWeather = await getWeatherData(\"forecast\", {\n    ...searchParams,\n    days: 5, // Number of forecast days (max 10 for free tier)\n  }).then(formatForecastWeather);\n\n  return { ...formattedCurrentWeather, ...formattedForecastWeather };\n};\n\n// Convert UNIX time to local time format\nconst formatToLocalTime = (\n  secs,\n  zone,\n  format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\n// Update icon URL function if needed\nconst iconUrlFromCode = (icon) => `https:${icon}`; // Updated for WeatherAPI\n\nexport default getFormattedWeatherData;\n\nexport { formatToLocalTime, iconUrlFromCode };\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,MAAMC,OAAO,GAAG,kCAAhB,C,CAAoD;;AACpD,MAAMC,QAAQ,GAAG,+BAAjB,C,CAEA;;AACA,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;EACjD,MAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAS,GAAEL,QAAS,IAAGE,QAAS,OAAhC,CAAZ;EACAE,GAAG,CAACE,MAAJ,GAAa,IAAIC,eAAJ,CAAoB,EAAE,GAAGJ,YAAL;IAAmBK,GAAG,EAAET;EAAxB,CAApB,CAAb;EAEA,OAAOU,KAAK,CAACL,GAAD,CAAL,CACJM,IADI,CACEC,GAAD,IAAS;IACb,IAAI,CAACA,GAAG,CAACC,EAAT,EAAa;MACX,MAAM,IAAIC,KAAJ,CAAW,uBAAsBF,GAAG,CAACG,MAAO,EAA5C,CAAN;IACD;;IACD,OAAOH,GAAG,CAACI,IAAJ,EAAP;EACD,CANI,CAAP;AAOD,CAXD,C,CAaA;;;AACA,MAAMC,oBAAoB,GAAIC,IAAD,IAAU;EACrC,MAAM;IACJC,QAAQ,EAAE;MAAEC,GAAF;MAAOC,GAAP;MAAYC,IAAZ;MAAkBC;IAAlB,CADN;IAEJC,OAAO,EAAE;MACPC,MAAM,EAAEC,IADD;MAEPC,WAAW,EAAEC,UAFN;MAGPC,QAHO;MAIPC,SAAS,EAAE;QAAEC,IAAI,EAAEC,OAAR;QAAiBC;MAAjB,CAJJ;MAKPC,QAAQ,EAAEC;IALH;EAFL,IASFjB,IATJ;EAWA,OAAO;IACLE,GADK;IAELC,GAFK;IAGLK,IAHK;IAILE,UAJK;IAKLC,QALK;IAMLP,IANK;IAOLC,OAPK;IAQLS,OARK;IASLC,IAAI,EAAEA,IAAI,CAACG,OAAL,CAAa,OAAb,EAAsB,OAAtB,CATD;IASiC;IACtCD;EAVK,CAAP;AAYD,CAxBD,C,CA0BA;;;AACA,MAAME,qBAAqB,GAAInB,IAAD,IAAU;EACtC,MAAM;IAAEM;EAAF,IAAcN,IAApB;EAEA,OAAO;IACLoB,QAAQ,EAAEpB,IAAI,CAACC,QAAL,CAAcoB,KADnB;IAELC,KAAK,EAAE,CAAC;MAAEC,KAAK,EAAE,OAAT;MAAkBf,IAAI,EAAEF,OAAO,CAACC,MAAhC;MAAwCQ,IAAI,EAAET,OAAO,CAACM,SAAR,CAAkBG;IAAhE,CAAD,CAFF;IAGLS,MAAM,EAAE;EAHH,CAAP;AAKD,CARD,C,CAUA;;;AACA,MAAMC,uBAAuB,GAAG,MAAOvC,YAAP,IAAwB;EACtD,MAAMwC,uBAAuB,GAAG,MAAM1C,cAAc,CAAC,SAAD,EAAYE,YAAZ,CAAd,CACnCO,IADmC,CAC9BM,oBAD8B,CAAtC;EAGA,MAAM4B,wBAAwB,GAAG,MAAM3C,cAAc,CAAC,UAAD,EAAa,EAChE,GAAGE,YAD6D;IAEhE0C,IAAI,EAAE,CAF0D,CAEvD;;EAFuD,CAAb,CAAd,CAGpCnC,IAHoC,CAG/B0B,qBAH+B,CAAvC;EAKA,OAAO,EAAE,GAAGO,uBAAL;IAA8B,GAAGC;EAAjC,CAAP;AACD,CAVD,C,CAYA;;;AACA,MAAME,iBAAiB,GAAG,UACxBC,IADwB,EAExBC,IAFwB;EAAA,IAGxBC,MAHwB,uEAGf,2CAHe;EAAA,OAIrBnD,QAAQ,CAACoD,WAAT,CAAqBH,IAArB,EAA2BI,OAA3B,CAAmCH,IAAnC,EAAyCI,QAAzC,CAAkDH,MAAlD,CAJqB;AAAA,CAA1B,C,CAMA;;;AACA,MAAMI,eAAe,GAAIrB,IAAD,IAAW,SAAQA,IAAK,EAAhD,C,CAAmD;;;AAEnD,eAAeU,uBAAf;AAEA,SAASI,iBAAT,EAA4BO,eAA5B"},"metadata":{},"sourceType":"module"}